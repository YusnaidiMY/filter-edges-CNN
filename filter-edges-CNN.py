# -*- coding: utf-8 -*-
"""Filter-Edges-CNN.ipynb

Automatically generated by Colaboratory.

The original file is located at
    https://colab.research.google.com/drive/136NtHZ-itJLIRu1AGOUl1BOh3kK1hJX_

This program demonstrates the use of a CNN filter to extract edge information from an image. 
The program allows the user to resize the input image to any pixel size, like 320 x 320, 128 x 128, etc. 
A filter of a 3 x 3 with one channel size is convoluted to the input image of the feature image to 
generate the feature map output, showing the edges of objects detected in the image. 
The original input image and the resulting feature map are shown using Matplotlib's 
subplot which is shown side by side for easy interpretation. Experiment with the edge detection quality 
by applying normalization and compare it without applying normalization.

Authors: Yusnaidi Md Yusof / yusnaidi.kl@utm.my, 
         Azizul Azizan / azizulazizan@utm.my
Date: 7.1.2024
Copyright RFTI@UTM 2024.
"""

import os
import numpy as np
import matplotlib.pyplot as plt
import cv2

# FIRST STEP: You need to mount this notebook to your Google Drive to the path of your input image.
# Use the left pane on the 'Files' icon to mount your Google Drive.
# IMPORTANT: Replace with the path to your image file. Example: C:\Users\username\image_folder\coffeecup-1024x1024.JPG
image_path = r'PATH_TO_YOUR_IMAGE'
img = cv2.imread(r'PATH_TO_YOUR_IMAGE')

if os.path.exists(image_path):
    file_size = os.path.getsize(image_path)
    print(f"The size of the image file is: {file_size} bytes")
else:
    print("Image file not found.")

if img is not None:
    # Get dimensions of the image
    height, width, channels = img.shape
    print(f"Image dimensions: Width={width}, Height={height}, Channels={channels}")
else:
    print("Image not found or could not be loaded.")

# Replace with the path to your image file

img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) #convert from BGR to RGB format

img = cv2.resize(img, (320, 320)) #resize the image to 320x320 pixels

print(img)

#performing image normalization to a range [1,-1]
normalizedImg = 2 * (img - np.min(img)) / (np.max(img) - np.min(img)) - 1 #applying the formula

print(normalizedImg)

#define a filter
filter = np.array([[-1, -1, -1],
                   [-1,  8, -1],
                   [-1, -1, -1]]) #this filter can detect edges in the image

#applying the filter to the image using convolution
output = cv2.filter2D(normalizedImg, -1, filter)

#creating a figure with two subplots
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))

#displaying the original image on the left subplot
ax1.imshow(img)
ax1.set_title('Original Image')
ax1.axis('off')

#displaying the output image on the right subplot
ax2.imshow(output)
ax2.set_title('Output Image')
ax2.axis('off')

#showing the figure
plt.show()